name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: helpdesk_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 mypy safety bandit
    
    - name: Security check with Safety
      run: safety check --json
      continue-on-error: true
    
    - name: Security check with Bandit
      run: bandit -r app -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with Black
      run: black --check app tests
    
    - name: Type check with MyPy
      run: mypy app --ignore-missing-imports
      continue-on-error: true
    
    - name: Set up test environment
      env:
        FLASK_ENV: testing
        DATABASE_URL: mysql+pymysql://test_user:test_password@localhost:3306/helpdesk_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        JWT_SECRET_KEY: test-jwt-secret
        CSRF_SECRET_KEY: test-csrf-secret
      run: |
        export FLASK_APP=app.py
        flask db init
        flask db migrate -m "Initial migration"
        flask db upgrade
    
    - name: Run tests with pytest
      env:
        FLASK_ENV: testing
        DATABASE_URL: mysql+pymysql://test_user:test_password@localhost:3306/helpdesk_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        JWT_SECRET_KEY: test-jwt-secret
        CSRF_SECRET_KEY: test-csrf-secret
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: |
          ${{ secrets.REGISTRY_URL }}/ml-helpdesk:latest
          ${{ secrets.REGISTRY_URL }}/ml-helpdesk:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here
        # e.g., SSH to staging server and run deployment script

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
        # e.g., SSH to production server and run deployment script
    
    - name: Health Check
      run: |
        echo "Performing health check..."
        curl -f https://helpdesk.mlgruppe.de/health || exit 1
    
    - name: Notify Teams
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
        text: |
          Deployment to production: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install pip-audit
      run: pip install pip-audit
    
    - name: Audit Python dependencies
      run: pip-audit --requirement requirements.txt --format=json --output=audit-report.json
      continue-on-error: true
    
    - name: Upload audit report
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-report
        path: audit-report.json